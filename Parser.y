-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parser where
import AbstractSyntax
import Lexer
import Error
import Control.Monad.Except
}

%name pProgram Program
%name pStmt Stmt
%name pListStmt ListStmt
%name pElif Elif
%name pListElif ListElif
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pListExp ListExp
%name pType Type
%name pListType ListType
%name pVarDecl VarDecl
%name pListVarDecl ListVarDecl
-- no lexer declaration
%monad { ErrM } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '*=' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  '+=' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '-=' { PT _ (TS _ 11) }
  '->' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  '/=' { PT _ (TS _ 14) }
  ':' { PT _ (TS _ 15) }
  ';' { PT _ (TS _ 16) }
  '<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  '[' { PT _ (TS _ 23) }
  ']' { PT _ (TS _ 24) }
  'and' { PT _ (TS _ 25) }
  'bool' { PT _ (TS _ 26) }
  'break' { PT _ (TS _ 27) }
  'continue' { PT _ (TS _ 28) }
  'elif' { PT _ (TS _ 29) }
  'else' { PT _ (TS _ 30) }
  'false' { PT _ (TS _ 31) }
  'if' { PT _ (TS _ 32) }
  'int' { PT _ (TS _ 33) }
  'not' { PT _ (TS _ 34) }
  'or' { PT _ (TS _ 35) }
  'pass' { PT _ (TS _ 36) }
  'print' { PT _ (TS _ 37) }
  'return' { PT _ (TS _ 38) }
  'times' { PT _ (TS _ 39) }
  'true' { PT _ (TS _ 40) }
  'void' { PT _ (TS _ 41) }
  'while' { PT _ (TS _ 42) }
  '{' { PT _ (TS _ 43) }
  '}' { PT _ (TS _ 44) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListStmt { AbstractSyntax.Program $1 }
Stmt :: { Stmt }
Stmt : Exp { AbstractSyntax.SExp $1 }
     | Exp '=' Exp { AbstractSyntax.SAssign $1 $3 }
     | Exp '+=' Exp { AbstractSyntax.SAddAssign $1 $3 }
     | Exp '-=' Exp { AbstractSyntax.SSubAssign $1 $3 }
     | Exp '*=' Exp { AbstractSyntax.SMulAssign $1 $3 }
     | Exp '/=' Exp { AbstractSyntax.SDivAssign $1 $3 }
     | 'pass' { AbstractSyntax.SPass }
     | 'return' { AbstractSyntax.SReturn }
     | 'return' Exp { AbstractSyntax.SReturnVal $2 }
     | 'break' { AbstractSyntax.SBreak }
     | 'continue' { AbstractSyntax.SContinue }
     | 'print' Exp { AbstractSyntax.SPrint $2 }
     | 'if' Exp ':' '{' ListStmt '}' ListElif { AbstractSyntax.SIf $2 $5 (reverse $7) }
     | 'if' Exp ':' '{' ListStmt '}' ListElif 'else' ':' '{' ListStmt '}' { AbstractSyntax.SIfElse $2 $5 (reverse $7) $11 }
     | 'while' Exp ':' '{' ListStmt '}' { AbstractSyntax.SWhile $2 $5 }
     | Type Ident '=' Exp { AbstractSyntax.SVarDef $1 $2 $4 }
     | Type Ident '(' ListVarDecl ')' ':' '{' ListStmt '}' { AbstractSyntax.SFuncDef $1 $2 $4 $8 }
     | Type Ident '(' ')' ':' '{' ListStmt '}' { AbstractSyntax.SFuncDef $1 $2 [] $7 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] }
         | Stmt { (:[]) $1 }
         | Stmt ';' ListStmt { (:) $1 $3 }
Elif :: { Elif }
Elif : 'elif' Exp ':' '{' ListStmt '}' { AbstractSyntax.Elif $2 $5 }
ListElif :: { [Elif] }
ListElif : {- empty -} { [] } | ListElif Elif { flip (:) $1 $2 }
Exp :: { Exp }
Exp : Type '(' ListVarDecl ')' '->' Exp { AbstractSyntax.ELambda $1 $3 $6 }
    | Type '(' ')' '->' Exp { AbstractSyntax.ELambda $1 [] $5 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 'or' Exp2 { AbstractSyntax.EOr $1 $3 } | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 'and' Exp3 { AbstractSyntax.EAnd $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : 'not' Exp4 { AbstractSyntax.ENot $2 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp5 { AbstractSyntax.EEq $1 $3 }
     | Exp4 '!=' Exp5 { AbstractSyntax.ENeq $1 $3 }
     | Exp4 '<' Exp5 { AbstractSyntax.ELt $1 $3 }
     | Exp4 '<=' Exp5 { AbstractSyntax.ELeq $1 $3 }
     | Exp4 '>' Exp5 { AbstractSyntax.EGt $1 $3 }
     | Exp4 '>=' Exp5 { AbstractSyntax.EGeq $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '+' Exp6 { AbstractSyntax.EAdd $1 $3 }
     | Exp5 '-' Exp6 { AbstractSyntax.ESub $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '*' Exp7 { AbstractSyntax.EMul $1 $3 }
     | Exp6 '/' Exp7 { AbstractSyntax.EDiv $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : '+' Exp8 { AbstractSyntax.EPlus $2 }
     | '-' Exp8 { AbstractSyntax.EMinus $2 }
     | Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Ident { AbstractSyntax.EVar $1 }
     | Integer { AbstractSyntax.EInt $1 }
     | 'true' { AbstractSyntax.ETrue }
     | 'false' { AbstractSyntax.EFalse }
     | '[' ListExp ']' { AbstractSyntax.EArray $2 }
     | '[' Exp 'times' Integer ']' { AbstractSyntax.EFill $2 $4 }
     | Exp8 '(' ListExp ')' { AbstractSyntax.ECall $1 $3 }
     | Exp8 '[' Exp ']' { AbstractSyntax.EIndex $1 $3 }
     | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'void' { AbstractSyntax.TVoid }
     | 'int' { AbstractSyntax.TInt }
     | 'bool' { AbstractSyntax.TBool }
     | Type '[' Integer ']' { AbstractSyntax.TArray $1 $3 }
     | Type '(' ListType ')' { AbstractSyntax.TFunc $1 $3 }
     | Type '(' ')' { AbstractSyntax.TFunc $1 [] }
     | Type '&' { AbstractSyntax.TRef $1 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
VarDecl :: { VarDecl }
VarDecl : Type Ident { AbstractSyntax.VarDecl $1 $2 }
ListVarDecl :: { [VarDecl] }
ListVarDecl : VarDecl { (:[]) $1 }
            | VarDecl ',' ListVarDecl { (:) $1 $3 }
{

returnM :: a -> ErrM a
returnM = return

thenM :: ErrM a -> (a -> ErrM b) -> ErrM b
thenM = (>>=)

happyError :: [Token] -> ErrM a
happyError ts =
  throwError $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

